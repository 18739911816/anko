import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

buildscript {
    ext.kotlin_version = '1.2.51'
    ext.kotlinx_dom_version = '0.0.10'
    ext.kotlinx_coroutines_version = '0.23.4'
    ext.androidx_version = '1.0.0-beta01'
    ext.constraint_layout_version = '1.1.2'

    ext.ANKO_VERSION = '0.10.6'
    ext.ANKO_VERSION_CODE = 105

    ext.COMPILE_SDK_VERSION = 28
    ext.MIN_SDK_VERSION = 15
    ext.TARGET_SDK_VERSION = 28
    ext.SUPPORT_ARTIFACT_VERSION = "27.1.1"

    ext.PROJECT_URL = 'https://github.com/JetBrains/anko'
    ext.SCM_URL = 'https://github.com/JetBrains/anko.git'
    ext.CONNECTION_URL = 'scm:git:https://github.com/JetBrains/anko.git'
    ext.DEVELOPER_CONNECTION_URL = 'scm:git:https://github.com/JetBrains/anko'

    ext.BINTRAY_USER_NAME = 'jetbrains'
    ext.BINTRAY_PACKAGE_NAME = 'anko'
    ext.BINTRAY_REPO_NAME = 'anko'

    ext.BINTRAY_DRY_RUN = false

    ext.POM_ARTIFACT_GROUP = 'org.jetbrains.anko'

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:3.1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.16"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean {
    doLast {
        delete(buildDir)
    }
}

task zipIdeaPlugin {
    dependsOn(':ide:preview:shadowJar')
    outputs.files("$buildDir/anko-ide-plugin.zip")

    doLast {
        File outputFile = new File("$buildDir/anko-ide-plugin.zip")
        ZipOutputStream zipOutputStream = null

        try {
            zipOutputStream = new ZipOutputStream(new FileOutputStream(outputFile))
            ZipEntry jar = new ZipEntry("Anko/lib/anko-ide-plugin.jar")
            zipOutputStream.putNextEntry(jar)

            zipOutputStream << new FileInputStream("anko/idea-plugin/preview/build/libs/preview-all.jar")
        } finally {
            if (zipOutputStream != null) {
                zipOutputStream.close()
            }
        }
    }
}

def publishedArtifacts = [
    ':generated:anko-appcompat-v7',
    ':generated:anko-appcompat-v7-listeners',
    ':generated:anko-appcompat-v7-coroutines',
    ':generated:anko-appcompat-v7-commons',
    ':generated:anko-cardview-v7',
    ':generated:anko-common',
    ':generated:anko-commons',
    ':generated:anko-design',
    ':generated:anko-design-listeners',
    ':generated:anko-design-coroutines',
    ':generated:anko-gridlayout-v7',
    ':generated:anko-percent',
    ':generated:anko-constraint-layout',
    ':generated:anko-constraintlayout-androidx',
    ':generated:anko-recyclerview-v7',
    ':generated:anko-recyclerview-v7-listeners',
    ':generated:anko-recyclerview-v7-coroutines',
    ':generated:anko-recyclerview-androidx',
    ':generated:anko-recyclerview-androidx-listeners',
    ':generated:anko-recyclerview-androidx-coroutines',
    ':generated:anko-sdk15',
    ':generated:anko-sdk15-listeners',
    ':generated:anko-sdk15-coroutines',
    ':generated:anko-sdk19',
    ':generated:anko-sdk19-listeners',
    ':generated:anko-sdk19-coroutines',
    ':generated:anko-sdk21',
    ':generated:anko-sdk21-listeners',
    ':generated:anko-sdk21-coroutines',
    ':generated:anko-sdk23',
    ':generated:anko-sdk23-listeners',
    ':generated:anko-sdk23-coroutines',
    ':generated:anko-sdk25',
    ':generated:anko-sdk25-listeners',
    ':generated:anko-sdk25-coroutines',
    ':generated:anko-sdk27',
    ':generated:anko-sdk27-listeners',
    ':generated:anko-sdk27-coroutines',
    ':generated:anko-sdk28',
    ':generated:anko-sdk28-listeners',
    ':generated:anko-sdk28-coroutines',
    ':generated:anko-sqlite',
    ':generated:anko-support-v4',
    ':generated:anko-support-v4-commons',
    ':generated:anko-coroutines',
    ':generated:anko',

    ':static:commons-base',
    ':static:platform-base',
    ':static:sqlite-base',
    ':static:design-base',
    ':static:supportV4-base',
    ':static:appcompatV7-base',
    ':static:constraintlayout-base'
]

task dist()
task publish()
task publishLocal()

afterEvaluate {
    def commonBuildTasks = [
            ':zipIdeaPlugin',
            ':generator:run',
            ':generator:test',
            ':robolectricTests:test'
    ]

    project.tasks.dist.dependsOn(commonBuildTasks)
    project.tasks.publish.dependsOn(commonBuildTasks)
    project.tasks.publishLocal.dependsOn(commonBuildTasks)

    project.tasks.dist.dependsOn(publishedArtifacts.collect { it + ":assembleRelease" })
    project.tasks.publish.dependsOn(publishedArtifacts.collect { it + ":bintrayUpload" })
    project.tasks.publishLocal.dependsOn(publishedArtifacts.collect { it + ":publish" })
}

ext.configureBintrayPublishing = { project, publicationNames ->
    project.bintray {
        user = System.getenv('BINTRAY_USER') ?: ""
        key = System.getenv('BINTRAY_API_KEY') ?: ""

        publications = publicationNames

        dryRun = BINTRAY_DRY_RUN

        pkg {
            userOrg = BINTRAY_USER_NAME
            repo = BINTRAY_REPO_NAME
            name = BINTRAY_PACKAGE_NAME
            licenses = ['Apache-2.0']
            vcsUrl = SCM_URL

            version {
                name = ANKO_VERSION
                released = new Date()
            }
        }
    }
}

ext.configureLibraryPomXml = { project, pom ->
    pom.withXml {
        asNode().children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            name 'anko'
            description 'Kotlin DSL for Android'
            url PROJECT_URL

            scm {
                url SCM_URL
                connection CONNECTION_URL
                developerConnection DEVELOPER_CONNECTION_URL
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                    distribution 'repo'
                    comments 'A business-friendly OSS license'
                }
            }
            developers {
                developer {
                    id 'JetBrains'
                    name 'JetBrains Team'
                    organization 'JetBrains'
                    organizationUrl 'http://www.jetbrains.com'
                }
            }
        }

        def appendDependencyNode = { node, dependency, configurationName ->
            def scope = 'runtime'
            if (configurationName.toLowerCase().endsWith('api')) {
                scope = 'compile'
            }

            def artifactId = dependency.name
            if (dependency.group == POM_ARTIFACT_GROUP
                    && !artifactId.contains('androidx')
                    && configurationName.startsWith('androidx')) {
                artifactId += '-androidx'
            }

            final dependencyNode = node.appendNode('dependency')
            dependencyNode.appendNode('groupId', dependency.group)
            dependencyNode.appendNode('artifactId', artifactId)
            dependencyNode.appendNode('version', dependency.version)
            dependencyNode.appendNode('scope', scope)
        }


        def dependencyConfigurations = [
                'api',
                'supportApi',
                'androidxApi',
                'implementation',
                'supportImplementation',
                'androidxImplementation'
        ]

        def dependenciesNode = asNode().appendNode('dependencies')
        dependencyConfigurations.each { configurationName ->
            def configuration = project.configurations.findByName(configurationName)
            if (configuration != null) {
                configuration.dependencies.each { Dependency dep ->
                    appendDependencyNode(dependenciesNode, dep, configurationName)
                }
            }
        }
    }
}
